from fastapi import FastAPI, Depends, HTTPException, status, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional
import os
import uuid
import httpx
import json
from datetime import datetime
import tempfile
from dotenv import load_dotenv
import asyncio

# Load environment variables
load_dotenv()

# Initialize FastAPI app
app = FastAPI(title="Call Companion API - Development Mode")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Development mode - mock data storage
mock_calls = {}
mock_transcripts = {}
mock_summaries = {}

# API Configuration
WHISPER_API_URL = "https://api.openai.com/v1/audio/transcriptions"
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"
WHISPER_API_KEY = os.getenv("WHISPER_API_KEY")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Mock authentication for development
async def verify_token(authorization: str):
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
        )
    
    # For development, accept any token that starts with "dev_"
    token = authorization.split("Bearer ")[1]
    if not token.startswith("dev_"):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid development token",
        )
    
    return {"uid": token, "email": "developer@example.com"}

# Routes
@app.get("/")
async def root():
    return {"message": "Call Companion API is running in DEVELOPMENT mode", "mode": "development"}

@app.post("/upload-call")
async def upload_call(
    audio_file: UploadFile = File(...),
    employee_id: str = Form(...),
    customer_id: str = Form(...),
    call_duration: int = Form(...),
    authorization: str = Depends(verify_token)
):
    # Generate unique filename
    filename = f"{uuid.uuid4()}.m4a"
    
    # Save file temporarily
    temp_file_path = tempfile.NamedTemporaryFile(delete=False).name
    with open(temp_file_path, "wb") as buffer:
        buffer.write(await audio_file.read())
    
    # Create mock call record
    call_id = str(uuid.uuid4())
    call_data = {
        "id": call_id,
        "employeeId": employee_id,
        "customerId": customer_id,
        "audioUrl": f"/mock/audio/{call_id}",
        "duration": call_duration,
        "startTime": datetime.now().isoformat(),
        "status": "recorded",
    }
    mock_calls[call_id] = call_data
    
    # Clean up temp file
    os.unlink(temp_file_path)
    
    return {
        "success": True,
        "callId": call_id,
        "audioUrl": f"/mock/audio/{call_id}"
    }

@app.post("/transcribe/{call_id}")
async def transcribe_call(
    call_id: str,
    whisper_api_key: Optional[str] = Form(None),
    authorization: str = Depends(verify_token)
):
    # Get call data
    call_data = mock_calls.get(call_id)
    if not call_data:
        raise HTTPException(status_code=404, detail="Call not found")
    
    # Mock transcription for development
    transcript_id = str(uuid.uuid4())
    transcript_text = "This is a mock transcription for development purposes. " \
                     "In a real environment, this would be generated by Whisper API. " \
                     "Customer discussed their needs and the representative provided excellent service."
    
    # Save mock transcript
    mock_transcripts[transcript_id] = {
        "id": transcript_id,
        "callId": call_id,
        "fullText": transcript_text,
        "createdAt": datetime.now().isoformat()
    }
    
    # Update call status
    call_data["status"] = "transcribed"
    call_data["transcriptId"] = transcript_id
    
    return {
        "success": True,
        "transcriptId": transcript_id,
        "text": transcript_text
    }

@app.post("/ai-summary/{call_id}")
async def generate_ai_summary(
    call_id: str,
    authorization: str = Depends(verify_token)
):
    # Get call data
    call_data = mock_calls.get(call_id)
    if not call_data:
        raise HTTPException(status_code=404, detail="Call not found")
    
    transcript_id = call_data.get("transcriptId")
    if not transcript_id:
        raise HTTPException(status_code=400, detail="Call has no transcript")
    
    # Get transcript
    transcript_data = mock_transcripts.get(transcript_id)
    if not transcript_data:
        raise HTTPException(status_code=404, detail="Transcript not found")
    
    # Mock AI summary for development
    summary_id = str(uuid.uuid4())
    summary_text = "Mock AI Summary:\n" \
                  "• Customer expressed interest in our premium services\n" \
                  "• Representative explained pricing and features\n" \
                  "• Follow-up meeting scheduled for next week\n" \
                  "• Customer sentiment: Positive\n" \
                  "• Action items: Send pricing details via email"
    
    # Save mock summary
    mock_summaries[summary_id] = {
        "id": summary_id,
        "callId": call_id,
        "summaryText": summary_text,
        "createdAt": datetime.now().isoformat()
    }
    
    # Update call status
    call_data["status"] = "summarized"
    call_data["summaryId"] = summary_id
    
    return {
        "success": True,
        "summaryId": summary_id,
        "summary": summary_text
    }

@app.get("/calls/{call_id}")
async def get_call(
    call_id: str,
    authorization: str = Depends(verify_token)
):
    call_data = mock_calls.get(call_id)
    if not call_data:
        raise HTTPException(status_code=404, detail="Call not found")
    
    return {"success": True, "call": call_data}

@app.get("/transcripts/{transcript_id}")
async def get_transcript(
    transcript_id: str,
    authorization: str = Depends(verify_token)
):
    transcript_data = mock_transcripts.get(transcript_id)
    if not transcript_data:
        raise HTTPException(status_code=404, detail="Transcript not found")
    
    return {"success": True, "transcript": transcript_data}

@app.get("/summaries/{summary_id}")
async def get_summary(
    summary_id: str,
    authorization: str = Depends(verify_token)
):
    summary_data = mock_summaries.get(summary_id)
    if not summary_data:
        raise HTTPException(status_code=404, detail="Summary not found")
    
    return {"success": True, "summary": summary_data}

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "mode": "development",
        "timestamp": datetime.now().isoformat(),
        "stats": {
            "calls": len(mock_calls),
            "transcripts": len(mock_transcripts),
            "summaries": len(mock_summaries)
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)